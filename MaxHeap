package imp;
import api.Heap;

public class MaxHeap implements Heap {
	
	private int[] heap;
	private int cant;
	
	@Override
	public void inicializarHeap() {
		heap = new int[100];
		cant = 0;
	}


	// EL I DE ESTAS DOS FUNCIONES SON LOS INDICES!!

	private void flotar(int i) {   //se usa al INSERTAR
		int padre = (i-1)/2;
		while((i != 0) && (heap[i] > heap[padre])) { 
			int aux = heap[i];
			heap[i] = heap[padre];
			heap[padre] = aux;
			
			i = padre;        //si se intercambian los valores, tambien los indices
			padre = (i-1)/2;
		}
	}
	
	private void hundir(int i) {
		int izq = 2 * i + 1;
		int der = 2 * i + 2;
		while(((izq < cant) && (heap[i] < heap[izq])) || ((der < cant) && (heap[i] < heap[der]))) { // se evalua que existe un hijo u otro.
													//Luego, el padre es menor que su hijo? o con el otro?
			
			int mayor;
			//si ambos hijos son mas grandes que su padre, entonces buscamos el mayor de todos para intercambiar

			if(der >= cant || (heap[izq] >= heap[der])) // se pregunta si existe un hijo derecho? xq de no haber el elegido sera el izquierdo
									//O si hay, comparar entre ellos dos.
				mayor = izq;
			else 
				mayor = der;
			
			//una vez establecido con quien intercambiamos, lo hacemos
			int aux = heap[i];
			heap[i] = heap[mayor];
			heap[mayor] = aux;
			
			i = mayor;    //despues del intercambio, se realiza para los indices. este sera el nuevo padre para compara con sus dos hijos
			izq = 2 * i + 1;
			der = 2 * i + 2;		
		}
	}
	

	@Override
	public boolean heapVacio() {
		return (cant == 0);
	}

	@Override
	public int raiz() {
		if(!heapVacio())
			return heap[0];
		else
			return -1;
	}
	
	@Override
	public int tamanio() {
		return cant;
	}


	@Override
	public void insertar(int valor) {
		heap[cant] = valor;
		cant++;
		flotar(cant-1);
	}
	
	//Se elimina la ra√≠z.
	@Override
	public void eliminar() {
		int aux = heap[0];
		heap[0] = heap[cant-1];
		heap[cant-1] = aux;
		
		cant--;
		hundir(0);
	}
	
	
	@Override
	public void construirHeap(int[] arr) {    //se construye apartir de un arreglo desordenado.
		heap = arr.clone();
		cant = arr.length;
		
		for(int i = cant-1; i != -1; i--)// se empieza desde el ultimo nodo.
			hundir(i);
	}


}

