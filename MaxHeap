package imp;
import api.Heap;

public class MaxHeap implements Heap {
	
	private int[] heap;
	private int cant;
	
	@Override
	public void inicializarHeap() {
		heap = new int[100];
		cant = 0;
	}
	
	
	private void flotar(int i) {
		int padre = (i-1)/2;
		while((i != 0) && (heap[i] > heap[padre])) {
			int aux = heap[i];
			heap[i] = heap[padre];
			heap[padre] = aux;
			
			i = padre;
			padre = (i-1)/2;
		}
	}
	
	private void hundir(int i) {
		int izq = 2 * i + 1;
		int der = 2 * i + 2;
		while(((izq < cant) && (heap[i] < heap[izq])) || ((der < cant) && (heap[i] < heap[der]))) {
			int mayor;
			
			if(der >= cant || (heap[izq] >= heap[der])) 
				mayor = izq;
			else 
				mayor = der;
			
			
			int aux = heap[i];
			heap[i] = heap[mayor];
			heap[mayor] = aux;
			
			i = mayor;
			izq = 2 * i + 1;
			der = 2 * i + 2;		
		}
	}
	

	@Override
	public boolean heapVacio() {
		return (cant == 0);
	}

	@Override
	public int raiz() {
		if(!heapVacio())
			return heap[0];
		else
			return -1;
	}
	
	@Override
	public int tamanio() {
		return cant;
	}


	@Override
	public void insertar(int valor) {
		heap[cant] = valor;
		cant++;
		flotar(cant-1);
	}
	
	//Se elimina la raÃ­z.
	@Override
	public void eliminar() {
		int aux = heap[0];
		heap[0] = heap[cant-1];
		heap[cant-1] = aux;
		
		cant--;
		hundir(0);
	}
	
	
	@Override
	public void construirHeap(int[] arr) {
		heap = arr.clone();
		cant = arr.length;
		
		for(int i = cant-1; i != -1; i--)
			hundir(i);
	}


}
