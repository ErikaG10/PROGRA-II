package heapsOff;

public class MetodosHeaps {
	
	public static int[] heapSortAsc(int[] arr) {
		int[] ordenado = new int[arr.length];
		Heap auxHeap = new MinHeap();
		
		auxHeap.inicializarHeap(arr);
		
		for(int i = 0; !auxHeap.heapVacio(); i++) {
			ordenado[i] = auxHeap.raiz();
			auxHeap.eliminar();
		}
		
		return ordenado;
	}
	
	public static int[] heapSortDesc(int[] arr) {
		int[] ordenado = new int[arr.length];
		Heap auxHeap = new MaxHeap();
		
		auxHeap.inicializarHeap(arr);
		
		for(int i = 0; !auxHeap.heapVacio(); i++) {
			ordenado[i] = auxHeap.raiz();
			auxHeap.eliminar();
		}
		
		return ordenado;
	}


	public static int[] topKElementos(int[] arr, int k) {
		Heap minHeap = new MinHeap();
		minHeap.inicializarHeap();
		
		int[] elementos = new int[k];
		
		for(int i = 0; i < arr.length; i++) {
			minHeap.insertar(arr[i]);
			
			if(minHeap.tamanio() > k)
				minHeap.eliminar();
		}
		
		for(int j = 0; j < elementos.length; j++) {
			elementos[j] = minHeap.raiz();
			minHeap.eliminar();
		}
			
		return elementos;				
	}
	
	
	
	
}
