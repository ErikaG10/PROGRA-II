package func;
import api.GrafoTDA;
import imp.*;

public class Dijkstra {
	
	public static Object[] implementacionMA(GrafoTDA grafo, char nodo) {
		int cant = GrafoUtils.tamanioConjunto(grafo.vertices());
		int[] distancia = new int[cant];     
		boolean[] visitados = new boolean[cant];
		char[] previos = new char[cant];   //el nodo anterior en el camino mas corto
		char[] vertices = GrafoUtils.listaDeVertices(grafo.vertices(), cant); // SE OBTIENE LA LISTA DE VERTICES DEL GRAFO


		//INICIALIZACION DE DISTANCIAS
		for(int v = 0; v < cant ; v++) {
			if(vertices[v] == nodo){     //si el nodo es el origen: 
				distancia[v] = 0; //SE ASIGNA 0 AL NODO ORIGEN
				visitados[v] = true;
				previos[v] = '-';
			}
			else {
				if(grafo.existeArista(nodo, vertices[v])) { //si hay una arista directa del nodo al otro: 
					distancia[v] = grafo.pesoArista(nodo, vertices[v]); //la distancia es el peso de la arista
					previos[v] = nodo; //el previous es el nodo anterior
				}
				else {
					distancia[v] = Integer.MAX_VALUE;  // SI NO HAY CONEXION DIRECTA: INFINITO AL RESTO DE VERTICES(en un principio)
					previos[v] = '-';
				}
			}
		}

		//ESTE BUCLE CONTINUA HASTA QUE NO HAYA MAS NODOS SIN VISITAR
		boolean quedanVertices = true;
		while(quedanVertices) {
			//BUSCA EL NODO NO VISITADO CON MENOR DISTANCIA...
			int seleccionado = -1;
			int distanciaMenor = Integer.MAX_VALUE;
			for(int u = 0; u < cant; u++) {
				if(!visitados[u] && (distancia[u] < distanciaMenor)) {
					seleccionado = u;
					distanciaMenor = distancia[u];
				}
			}
			if(seleccionado == -1) {quedanVertices = false; break;} //VERIFICA SI SE ENCONTRO UNO
			
			visitados[seleccionado] = true;  //SE MARCA COMO VISITADO

			//SE EVALUA TODOS LOS VECINO DEL NODO SELECCIONADO
			for(int vecino = 0; vecino < cant; vecino++) {
				if(vecino == seleccionado) continue;
				
				int distVecinos = grafo.pesoArista(vertices[seleccionado], vertices[vecino]);
				if((distVecinos != 0) && ((distancia[seleccionado] + distVecinos) < distancia[vecino])) { //se actualiza solo si existe una arista y la nueva distancia es menor a la actual.
					distancia[vecino] = distancia[seleccionado] + distVecinos;
					previos[vecino] = vertices[seleccionado];
				}
			}
		}
		return new Object[] {vertices, distancia, previos};
	}



	//LISTA DE ADYACENCIA: CADA NODO GUARDA UNA LISTA DE SUS VECINOS. ADEMAS SE USA COLA DE PRIORIDAD CON MINHEAP PARA SELECCIONAR EL NODO CON MENOR DISTANCIA DE FORMA EFICIENTE

	public static Object[] implementacionLA(GrafoTDA grafo, char nodo, Arista[] listaAdyacencia) {
		int cant = GrafoUtils.tamanioConjunto(grafo.vertices());
		int[] distancia = new int[cant];
		char[] previos = new char[cant];
		char[] vertices = GrafoUtils.listaDeVertices(grafo.vertices(), cant);
		MinHeapAO colaPr = new MinHeapAO();          
		
		colaPr.inicializarHeap();                //SE INSERTAN LOS VERTICES CON SUS DISTANCIAS EN LA COLA
		for(int v = 0; v < cant ; v++) {
			if(vertices[v] == nodo){
				distancia[v] = 0;
				previos[v] = '-';
			}
			else {
				int distInicial = grafo.pesoArista(nodo, vertices[v]);
				if(distInicial != 0) {
					distancia[v] = distInicial;
					previos[v] = nodo;
				}
				else {
					distancia[v] = Integer.MAX_VALUE;
					previos[v] = '-';
				}
				colaPr.insertar(v, distancia[v]);
			}
		}
		
		
		while(!colaPr.heapVacio()) {
			if(colaPr.raiz() == Integer.MAX_VALUE) break; //SI EL NODO CERCANO TIENE INFITO CORTO EL BUCLE PORQUE YA NO HAY CAMINOS POSIBLES . PERO SI DESPUES DE ESE HABIAN CAMINOS?????????????????
			
			int seleccionado = colaPr.primero();  //DA EL INDICE DEL NODO CON MENOR DISTANCIA
			colaPr.desacolar(); // LO SACAMOS

			Arista vecino = listaAdyacencia[seleccionado]; //NOS DA LA LISTA ENLAZADA DE VECINOS DEL NODO
			while(vecino != null) {
				int distanciaOrigen = distancia[seleccionado] + vecino.peso;
				if(distanciaOrigen < distancia[vecino.inx]) {
					distancia[vecino.inx] = distanciaOrigen;
					colaPr.disminuirClave(vecino.inx, distanciaOrigen);
					previos[vecino.inx] = vertices[seleccionado];
				}
				vecino = vecino.siguiente;
			}
			
			
		}
		return new Object[] {vertices, distancia, previos};
	}
	
}
