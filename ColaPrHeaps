package imp;
import api.ColaPr;

public class ColaPrHeaps implements ColaPr {
	
	class Elemento{
		int prioridad;
		int valor;
	}
	
	private Elemento[] heap;
	private int cant;

	@Override
	public void inicializarCola() {
		heap = new Elemento[100];
		cant = 0;
	}
	
	private void intercambiarNodos(Elemento foo, Elemento bar) {
		int auxP = foo.prioridad;
		int auxV = foo.valor;
		
		foo.prioridad = bar.prioridad;
		foo.valor = bar.valor;
		
		bar.prioridad = auxP;
		bar.valor = auxV;
	}
	
	
	private void flotar(int i) {
		int padre = (i-1)/2;
		while((i != 0) && (heap[i].prioridad > heap[padre].prioridad)) {
			
			intercambiarNodos(heap[i], heap[padre]);
			
			i = padre;
			padre = (i-1)/2;
		}
	}
	
	private void hundir(int i) {
		int izq = 2 * i + 1;
		int der = 2 * i + 2;
		while(((izq < cant) && (heap[i].prioridad < heap[izq].prioridad)) || ((der < cant) && (heap[i].prioridad < heap[der].prioridad))) {
			int mayor;
			
			if(der >= cant || (heap[izq].prioridad >= heap[der].prioridad)) 
				mayor = izq;
			else
				mayor = der;
			
			
			intercambiarNodos(heap[i], heap[mayor]);
			
			i = mayor;
			izq = 2 * i + 1;
			der = 2 * i + 2;		
		}
	}

	@Override
	public void acolarPrioridad(int valor, int prioridad) {
		heap[cant] = new Elemento();
		heap[cant].prioridad = prioridad;
		heap[cant].valor = valor;
		cant++;
		
		flotar(cant-1);
	}

	@Override
	public void desacolar() {
		intercambiarNodos(heap[0], heap[cant-1]);
		
		cant--;
		hundir(0);

	}

	@Override
	public int primero() {
		if(!colaVacia())
			return heap[0].valor;
		else
			return -1;
	}
	
	@Override
	public int prioridad() {
		if(!colaVacia())
			return heap[0].prioridad;
		else
			return -1;
	}

	@Override
	public boolean colaVacia() {
		return (cant == 0);
	}

}
